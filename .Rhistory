tree.boston=tree(medv~.,Boston ,subset=train)
summary(tree.boston)
plot(tree.boston);text(tree.boston ,pretty=0)
cv.boston=cv.tree(tree.boston)
plot(cv.boston$size ,cv.boston$dev ,type='b')
plot(cv.boston$size ,cv.boston$dev ,type='b')
prune.boston=prune.tree(tree.boston ,best=5)
plot(prune.boston);text(prune.boston ,pretty=0)
yhat=predict(tree.boston ,newdata=Boston[-train,])
boston.test=Boston[-train ,"medv"]
plot(yhat,boston.test)
abline (0 ,1)
plot(yhat,boston.test);abline (0 ,1)
mean((yhat-boston.test)^2)
library(randomForest)
set.seed(1)
install.packages("randomForest")
library(randomForest)
set.seed(1)
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry = 13, importance=TRUE)
bag.boston
yhat.bag = predict(bag.boston ,newdata=Boston[-train ,])
plot(yhat.bag, boston.test);abline (0 ,1)
mean((yhat.bag-boston.test)^2)
bag.boston=randomForest(medvâˆ¼.,data=Boston,subset=train, mtry=13,ntree=25)
bag.boston=randomForest(medv~.,data=Boston,subset=train, mtry=13,ntree=25)
yhat.bag = predict(bag.boston ,newdata=Boston[-train ,])
mean((yhat.bag-boston.test)^2)
set.seed (1)
rf.boston=randomForest(medv~.,data=Boston,subset=train,mtry=6,importance =TRUE)
yhat.rf = predict(rf.boston ,newdata=Boston[-train ,])
mean((yhat.rf-boston.test)^2)
imporatnce(rf.boston)
importance(rf.boston)
varImpPlot(rf.boston)
library(gbm)
install.packages("gbm")
library(gbm)
set.seed(1)
boost.boston=gbm(medv~.,data=Boston[train,],distribution="gaussian",n.trees=5000,interaction.depth=4)
summary(boost.boston)
par(mfrow=c(1,2))
plot(boost.boston,i="rm");plot(boost.boston,i="lstat")
yhat.boost = predict(boost.boston, newdata = Boston[-train,], n.trees=5000)
mean((yhat.boost -boston.test)^2)
boost.boston=gbm(medv~.,data=Boston[train,],distribution= "gaussian ",n.trees=5000, interaction.depth=4,shrinkage =0.2, verbose =F)
boost.boston=gbm(medv~.,data=Boston[train,],distribution= "gaussian",n.trees=5000, interaction.depth=4,shrinkage =0.2, verbose =F)
yhat.boost=predict(boost.boston,newdata=Boston[-train,], n.trees=5000)
mean((yhat.boost -boston.test)^2)
library(MASS)
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
tree.boston=tree(medv~.,Boston ,subset=train)
summary(tree.boston)
plot(tree.boston);text(tree.boston ,pretty=0)
cv.boston=cv.tree(tree.boston)
plot(cv.boston$size ,cv.boston$dev ,type='b')
prune.boston=prune.tree(tree.boston ,best=5)
plot(prune.boston);text(prune.boston ,pretty=0)
yhat=predict(tree.boston ,newdata=Boston[-train,])
boston.test=Boston[-train ,"medv"]
plot(yhat,boston.test);abline (0 ,1)
mean((yhat-boston.test)^2)
library(randomForest)
set.seed(1)
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry = 13, importance=TRUE)
bag.boston
yhat.bag = predict(bag.boston ,newdata=Boston[-train ,])
plot(yhat.bag, boston.test);abline (0 ,1)
mean((yhat.bag-boston.test)^2)
knitr::opts_chunk$set(echo = TRUE)
library(tree)
library(ISLR)
attach(Carseats)
#hist(Sales)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats, High)
tree.carseats=tree(High~.-Sales,data=Carseats)
summary(tree.carseats)
plot(tree.carseats);text(tree.carseats,pretty=0)
tree.carseats
set.seed(2)
train=sample(1:nrow(Carseats),200)
Carseats.test=Carseats [-train ,]
High.test=High[-train]
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
plot(tree.carseats);text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats,Carseats.test,type="class")
table(tree.pred ,High.test)
with(Carseats[-train,],table(tree.pred,High))
(86+57)/200
set.seed(3)
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow=c(1,2))
plot(cv.carseats$size, cv.carseats$dev, type="b")
plot(cv.carseats$k, cv.carseats$dev, type="b")
prune.carseats=prune.misclass(tree.carseats,best=9)
plot(prune.carseats);text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(94+60)/200
prune.carseats=prune.misclass(tree.carseats,best=15)
plot(prune.carseats);text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(86+62)/200
library(tree)
library(ISLR)
attach(Carseats)
#hist(Sales)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats, High)
tree.carseats=tree(High~.-Sales,data=Carseats)
summary(tree.carseats)
plot(tree.carseats);text(tree.carseats,pretty=0)
tree.carseats
set.seed(2)
train=sample(1:nrow(Carseats),200)
Carseats.test=Carseats [-train ,]
High.test=High[-train]
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
plot(tree.carseats);text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats,Carseats.test,type="class")
table(tree.pred ,High.test)
with(Carseats[-train,],table(tree.pred,High))
(86+57)/200
set.seed(3)
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow=c(1,2))
plot(cv.carseats$size, cv.carseats$dev, type="b")
plot(cv.carseats$k, cv.carseats$dev, type="b")
prune.carseats=prune.misclass(tree.carseats,best=9)
plot(prune.carseats);text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(94+60)/200
prune.carseats=prune.misclass(tree.carseats,best=15)
plot(prune.carseats);text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(86+62)/200
library(MASS)
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
tree.boston=tree(medv~.,Boston ,subset=train)
summary(tree.boston)
plot(tree.boston);text(tree.boston ,pretty=0)
cv.boston=cv.tree(tree.boston)
plot(cv.boston$size ,cv.boston$dev ,type='b')
prune.boston=prune.tree(tree.boston ,best=5)
plot(prune.boston);text(prune.boston ,pretty=0)
yhat=predict(tree.boston ,newdata=Boston[-train,])
boston.test=Boston[-train ,"medv"]
plot(yhat,boston.test);abline (0 ,1)
mean((yhat-boston.test)^2)
library(randomForest)
set.seed(1)
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry = 13, importance=TRUE)
bag.boston
yhat.bag = predict(bag.boston ,newdata=Boston[-train ,])
plot(yhat.bag, boston.test);abline (0 ,1)
mean((yhat.bag-boston.test)^2)
bag.boston=randomForest(medv~.,data=Boston,subset=train, mtry=13,ntree=25)
yhat.bag = predict(bag.boston ,newdata=Boston[-train ,])
mean((yhat.bag-boston.test)^2)
set.seed (1)
rf.boston=randomForest(medv~.,data=Boston,subset=train,mtry=6,importance =TRUE)
yhat.rf = predict(rf.boston ,newdata=Boston[-train ,])
mean((yhat.rf-boston.test)^2)
importance(rf.boston)
varImpPlot(rf.boston)
library(gbm)
set.seed(1)
boost.boston=gbm(medv~.,data=Boston[train,],distribution="gaussian",n.trees=5000,interaction.depth=4)
summary(boost.boston)
par(mfrow=c(1,2))
plot(boost.boston,i="rm");plot(boost.boston,i="lstat")
yhat.boost = predict(boost.boston, newdata = Boston[-train,], n.trees=5000)
mean((yhat.boost -boston.test)^2)
boost.boston=gbm(medv~.,data=Boston[train,],distribution= "gaussian",n.trees=5000, interaction.depth=4,shrinkage =0.2, verbose =F)
yhat.boost=predict(boost.boston,newdata=Boston[-train,], n.trees=5000)
mean((yhat.boost -boston.test)^2)
install.pacakages("ISLR")
install.packages("ISLR")
install.packages("e1071")
install.packages("ROCR")
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
x=matrix(rnorm(20*2), ncol=2)
y=c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,] + 1
plot(x, col=(3-y))
dat=data.frame(x=x, y=as.factor(y))
library(e1071)
svmfit=svm(y~., data=dat, kernel="linear", cost=10,scale=FALSE)
plot(svmfit, dat)
svmfit$index
summary(svmfit)
svmfit=svm(y~., data=dat, kernel="linear", cost=0.1,scale=FALSE)
plot(svmfit, dat)
svmfit$index
set.seed(1)
tune.out=tune(svm,y~.,data=dat,kernel="linear",ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))
summary(tune.out)
bestmod=tune.out$best.model
summary(bestmod)
xtest=matrix(rnorm(20*2), ncol=2)
ytest=sample(c(-1,1), 20, rep=TRUE)
xtest[ytest==1,]=xtest[ytest==1,] + 1
testdat=data.frame(x=xtest, y=as.factor(ytest))
ypred=predict(bestmod,testdat)
table(predict=ypred, truth=testdat$y)
svmfit=svm(y~., data=dat, kernel="linear", cost=.01,scale=FALSE)
ypred=predict(svmfit,testdat)
table(predict=ypred, truth=testdat$y)
x[y==1,]=x[y==1,]+0.5
plot(x, col=(y+5)/2, pch=19)
dat=data.frame(x=x,y=as.factor(y))
svmfit=svm(y~., data=dat, kernel="linear", cost=1e5)
summary(svmfit)
plot(svmfit, dat)
svmfit=svm(y~., data=dat, kernel="linear", cost=1)
summary(svmfit)
plot(svmfit,dat)
set.seed(1)
x=matrix(rnorm(200*2), ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x,y=as.factor(y))
plot(x, col=y)
train=sample(200,100)
svmfit=svm(y~., data=dat[train,], kernel="radial",  gamma=1, cost=1)
plot(svmfit, dat[train,])
summary(svmfit)
svmfit=svm(y~., data=dat[train,], kernel="radial",gamma=1,cost=1e5)
plot(svmfit,dat[train,])
set.seed(1)
tune.out=tune(svm, y~., data=dat[train,], kernel="radial", ranges=list(cost=c(0.1,1,10,100,1000),gamma=c(0.5,1,2,3,4)))
summary(tune.out)
table(true=dat[-train,"y"], pred=predict(tune.out$best.model,newdata=dat[-train,]))
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
perf = performance(predob, "tpr", "fpr")
plot(perf,...)}
svmfit.opt=svm(y~., data=dat[train,], kernel="radial",gamma=2, cost=1,decision.values=T)
fitted=attributes(predict(svmfit.opt,dat[train,],decision.values=TRUE))$decision.values
par(mfrow=c(1,2))
rocplot(fitted,dat[train,"y"],main="Training Data")
svmfit.flex=svm(y~., data=dat[train,], kernel="radial",gamma=50, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.flex,dat[train,],decision.values=T))$decision.values
rocplot(fitted,dat[train,"y"],add=T,col="red")
fitted=attributes(predict(svmfit.opt,dat[-train,],decision.values=T))$decision.values
rocplot(fitted,dat[-train,"y"],main="Test Data")
fitted=attributes(predict(svmfit.flex,dat[-train,],decision.values=T))$decision.values
rocplot(fitted,dat[-train,"y"],add=T,col="red")
set.seed(1)
x=rbind(x, matrix(rnorm(50*2), ncol=2))
y=c(y, rep(0,50))
x[y==0,2]=x[y==0,2]+2
dat=data.frame(x=x, y=as.factor(y))
par(mfrow=c(1,1))
plot(x,col=(y+1))
svmfit=svm(y~., data=dat, kernel="radial", cost=10, gamma=1)
plot(svmfit, dat)
library(ISLR)
names(Khan)
dim(Khan$xtrain)
dim(Khan$xtest)
length(Khan$ytrain)
length(Khan$ytest)
table(Khan$ytrain)
table(Khan$ytest)
dat=data.frame(x=Khan$xtrain, y=as.factor(Khan$ytrain))
out=svm(y~., data=dat, kernel="linear",cost=10)
summary(out)
table(out$fitted, dat$y)
dat.te=data.frame(x=Khan$xtest, y=as.factor(Khan$ytest))
pred.te=predict(out, newdata=dat.te)
table(pred.te, dat.te$y)
a1 = 0.6^5*0.4^5
b1 = 0.5^5*0.5^5
A1 = a1/(a1+b1)
B1 = b1/(a1+b1)
A1
B1
10*0.45*0.5
10*0.55*0.5
10*0.55*0.5
a2 = 0.6^9*0.4^1
b2 = 0.5^9*0.5^1
A2 = a2/(a2+b2)
B2 = b2/(a2+b2)
A2
B2
10*0.8*0.9
10*0.8*0.1
10*0.2*0.9
10*0.2*0.1
0.256/0.16
125+96
96/(125+96)
125/(125+96)
3.81/(3.81+2.25)
library(dplyr)
library(ggplot2)
setwd("./Documents/GitHub/amazon_skills_scraper")
workout = read.csv(file='manual_data/content_analysis_skills/content_analysis_7minuteWorkout.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
workout %>% head()
workout %>% tail()
workout[21,]
anymote = read.csv(file='manual_data/content_analysis_skills/content_analysis_anymoteSmartRemote.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
askmybuddy = read.csv(file='manual_data/content_analysis_skills/content_analysis_askMyBuddy.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
domino = read.csv(file='manual_data/content_analysis_skills/content_analysis_domino.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
fox = read.csv(file='manual_data/content_analysis_skills/content_analysis_foxNews.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
hue = read.csv(file='manual_data/content_analysis_skills/content_analysis_Hue.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
bluelink = read.csv(file='manual_data/content_analysis_skills/content_analysis_hyundaiBlueLink.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
jeopardy = read.csv(file='manual_data/content_analysis_skills/content_analysis_jeopardy.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
lyft = read.csv(file='manual_data/content_analysis_skills/content_analysis_Lyft.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
mastermind = read.csv(file='manual_data/content_analysis_skills/content_analysis_mastermind.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
meow = read.csv(file='manual_data/content_analysis_skills/content_analysis_meow.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
ourGroceries = read.csv(file='manual_data/content_analysis_skills/content_analysis_ourGroceries.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
bedtimestory = read.csv(file='manual_data/content_analysis_skills/content_analysis_shortBedtimeStory.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
sleepSounds = read.csv(file='manual_data/content_analysis_skills/content_analysis_SleepandRelaxationsSounds.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
bartender =  read.csv(file='manual_data/content_analysis_skills/content_analysis_theBartender.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
magicDoor = read.csv(file='manual_data/content_analysis_skills/content_analysis_theMagicDoor.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
translated = read.csv(file='manual_data/content_analysis_skills/content_analysis_translated.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
weather = read.csv(file='manual_data/content_analysis_skills/content_analysis_weather.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
wheresMyPhone = read.csv(file='manual_data/content_analysis_skills/content_analysis_where'sMyPhone.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
wheresMyPhone = read.csv(file='manual_data/content_analysis_skills/content_analysis_wheresMyPhone.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
capitalOne = read.csv(file='manual_data/content_analysis_skills/content_analysis_capitalOne.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
workout = read.csv(file='manual_data/content_analysis_skills/content_analysis_7minuteWorkout.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
anymote = read.csv(file='manual_data/content_analysis_skills/content_analysis_anymoteSmartRemote.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
askmybuddy = read.csv(file='manual_data/content_analysis_skills/content_analysis_askMyBuddy.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
domino = read.csv(file='manual_data/content_analysis_skills/content_analysis_domino.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
fox = read.csv(file='manual_data/content_analysis_skills/content_analysis_foxNews.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
hue = read.csv(file='manual_data/content_analysis_skills/content_analysis_Hue.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
bluelink = read.csv(file='manual_data/content_analysis_skills/content_analysis_hyundaiBlueLink.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
jeopardy = read.csv(file='manual_data/content_analysis_skills/content_analysis_jeopardy.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
lyft = read.csv(file='manual_data/content_analysis_skills/content_analysis_Lyft.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
mastermind = read.csv(file='manual_data/content_analysis_skills/content_analysis_mastermind.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
meow = read.csv(file='manual_data/content_analysis_skills/content_analysis_meow.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
ourGroceries = read.csv(file='manual_data/content_analysis_skills/content_analysis_ourGroceries.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
bedtimestory = read.csv(file='manual_data/content_analysis_skills/content_analysis_shortBedtimeStory.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
sleepSounds = read.csv(file='manual_data/content_analysis_skills/content_analysis_SleepandRelaxationsSounds.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
bartender = read.csv(file='manual_data/content_analysis_skills/content_analysis_theBartender.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
magicDoor = read.csv(file='manual_data/content_analysis_skills/content_analysis_theMagicDoor.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
translated = read.csv(file='manual_data/content_analysis_skills/content_analysis_translated.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
weather = read.csv(file='manual_data/content_analysis_skills/content_analysis_weather.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
wheresMyPhone = read.csv(file='manual_data/content_analysis_skills/content_analysis_wheresMyPhone.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8",skip = 2, na.strings = c(''))
wheresMyPhone
wheresMyPhone[21]
wheresMyPhone[21,]
skills_list = [weather,wheresMyPhone]
skills_list = list(weather,wheresMyPhone)
skills_list
skills_list %>% str
skills_list = list(capitalOne,workout,anymote,askmybuddy,domino,fox,hue,bluelink,jeopardy,lyft,mastermind,meow,ourGroceries,
bedtimestory,sleepSounds,bartender,magicDoor,translated,weather,wheresMyPhone)
skills_list %>% length()
skills_list[1][21,]
skills_list[1]
skills_list[[1]]
temp = skills_list[[1]]
temp[21,]
skills_content_df = data.frame()
skills_content_df
colnames(skills_content_df) = c('capitalOne','workout','anymote','askmybuddy','domino','fox','hue','bluelink','jeopardy','lyft','mastermind','meow','ourGroceries','
bedtimestory','sleepSounds','bartender','magicDoor','translated','weather','wheresMyPhone')
skills_content_df
colnames(skills_content_df)
skills_content_df = data.frame()
skills_contents_df = data.frame()
for(i in 1:length(skills_list)){
temp = skills_list[i]
rbind(skills_contents_df,temp[21,])
}
length(skills_list)
temp = skills_list[1]
temp
temp[21,]
temp
temp[1]
temp[2]
temp[3]
temp
temp %>% head
temp %>% str
temp[1]
temp[21]
temp[21,]
temp %>% str
temp = skills_list[[1]]
temp
temp %>% str
skills_contents_df = data.frame()
for(i in 1:length(skills_list)){
temp = skills_list[[i]]
rbind(skills_contents_df,temp[21,])
}
skills_contents_df %>% str
length(skills_list)
skills_list[[20]]
skills_contents_df = data.frame()
for(i in 1:length(skills_list)){
temp = skills_list[[i]]
skills_contents_df = rbind(skills_contents_df,temp[21,])
}
skills_contents_df %>% str
skills_contents_df
rownames(skills_contents_df) = c('capitalOne','workout','anymote','askmybuddy','domino','fox','hue','bluelink','jeopardy','lyft','mastermind','meow','ourGroceries','
bedtimestory','sleepSounds','bartender','magicDoor','translated','weather','wheresMyPhone')
skills_contents_df %>% str
skills_contents_df
View(skills_contents_df)
capitalOne[1,]
capitalOne[21,]
workout[21,]
skills_contents_df
skills_contents_df
skills_contents_df[,-c(1,2)]
skills_contents_df = skills_contents_df[,-c(1,2)]
skills_contents_df %>% summary
skills_contents_df %>% as.numeric
?transform
data.matrix(skills_contents_df)
data.matrix(skills_contents_df) %>% data.frame
data.matrix(skills_contents_df) %>% data.frame %>% str
skills_contents_df = data.matrix(skills_contents_df) %>% data.frame %>% str
skills_contents_df %>% str
skills_contents_df = data.frame()
for(i in 1:length(skills_list)){
temp = skills_list[[i]]
skills_contents_df = rbind(skills_contents_df,temp[21,])
}
rownames(skills_contents_df) = c('capitalOne','workout','anymote','askmybuddy','domino','fox','hue','bluelink','jeopardy','lyft','mastermind','meow','ourGroceries','
bedtimestory','sleepSounds','bartender','magicDoor','translated','weather','wheresMyPhone')
skills_contents_df = skills_contents_df[,-c(1,2)]
skills_contents_df = data.matrix(skills_contents_df) %>% data.frame
skills_contents_df %>% str
skills_contents_df %>% summary
skills_contents_df
View(skills_contents_df)
skills_contents_df %>% summary
skills_contents_df %>% boxplot()
ggplot(skills_contents_df) + geom_boxplot()
skills_content_df %>% head
skills_content_df %>% rm
skills_contents_df %>% head
?ggplot
skill_names = c('capitalOne','workout','anymote','askmybuddy','domino','fox','hue','bluelink','jeopardy','lyft','mastermind','meow','ourGroceries','
bedtimestory','sleepSounds','bartender','magicDoor','translated','weather','wheresMyPhone')
cbind(skill_names,skills_contents_df)
seq(1:20)
rownames(skills_contents_df) = seq(1:20)
ggplot(skills_contents_df, aes(x=skill_names)) + geom_boxplot()
ggplot(skills_contents_df, aes(x=skill_names, y = colnames(skills_contents_df))) + geom_boxplot()
colnames(skills_contents_df)
skills_contents_df %>% boxplot()
skills_contents_df %>% summary
skills_contents_df %>% boxplot()
skills_contents_df
skills_contents_df = cbind(skill_names,skills_contents_df)
skills_contents_df
skills_contents_df$skill_names
skill_names = c('capitalOne','workout','anymote','askmybuddy','domino','fox','hue','bluelink','jeopardy','lyft','mastermind','meow','ourGroceries',
'bedtimestory','sleepSounds','bartender','magicDoor','translated','weather','wheresMyPhone')
skills_contents_df = skills_contents_df[,-1]
skills_contents_df$skill_names
skills_contents_df
skills_contents_df = cbind(skill_names,skills_contents_df)
skills_contents_df$skill_names
skills_contents_df %>% boxplot()
skills_contents_df[,-1] %>% boxplot()
skills_contents_df %>% summary
skills_contents_df
reviews_liwc = read.csv(file='datasets/LIWC2015 Results (reviews_processed_v01.csv).csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE)
review_colnames_vec = reviews_liwc %>% colnames()
review_colnames_vec[1:10] = c("author", "commentNum", "content", "date", "id", "rating", "skill_title", "timestamp", "title", "vote")
colnames(reviews_liwc) = review_colnames_vec
skills = read.csv(file='datasets/skills_processed_v01.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8")
reviews = read.csv(file='datasets/reviews_processed_v01.csv',header = TRUE, sep = ',' ,stringsAsFactors = FALSE,encoding = "utf-8")
t1 = reviews_liwc$skill_title %>% data.frame
t2 = cbind(skills$category,skills$title)
colnames(t1) = c('title')
colnames(t2) = c('category','title')
title_category = merge(t1,t2,by = 'title', all = TRUE)
reviews_liwc = reviews_liwc[order(reviews_liwc$skill_title),]
reviews_liwc = mutate(reviews_liwc, title_category$category)
colnames(reviews_liwc)[104] = 'category'
reviews_liwc %>% head
summary(reviews_liwc)
ggplot(data = reviews_liwc, aes(x = skill_title ,y = social)) + geom_boxplot()
skills_contents_df[,-1] %>% boxplot()
skills_contents_df[,1]
skills %>% head
skills[c('title')]
skills[c('title', 'rating')]
t = skills[c('title', 'rating')]
t[order(rating)]
t[order('rating')]
t
t[order('rating'),]
?order
?sort
t[order(t$rating),]
t[order(t$rating,decreasing = TRUE),]
